<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="statusStrip1.TrayLocation" type="System.Drawing.Point, System.Drawing">
    <value>625, 55</value>
  </data>
  <data name="toolStrip1.TrayLocation" type="System.Drawing.Point, System.Drawing">
    <value>751, 55</value>
  </data>
  <data name="saveFileDialog1.TrayLocation" type="System.Drawing.Point, System.Drawing">
    <value>861, 55</value>
  </data>
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        AD//AAA//wAAP/8AAD//AAA//8AA//////8=
</value>
  </data>
</root>